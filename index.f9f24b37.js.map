{"mappings":"AAkMAA,QAAQC,IAdR,SAAwBC,EAAQC,GAE9B,IAAIC,EAAc,KAElB,IAAK,IAAIC,KAASH,EACZG,EAAMC,OAASH,IAEjBC,EAAcC,GAIlB,OAAOD,EAAYG,MAAQH,EAAYI,QACzC,CAEYC,CAtBG,CACb,CAAEH,KAAM,UAAWC,MAAO,KAAMC,SAAU,GAC1C,CAAEF,KAAM,YAAaC,MAAO,KAAMC,SAAU,GAC5C,CAAEF,KAAM,SAAUC,MAAO,IAAKC,SAAU,GACxC,CAAEF,KAAM,SAAUC,MAAO,IAAKC,SAAU,IAkBP","sources":["src/js/mod-3.js"],"sourcesContent":["//Якщо значення властивості - це функція, така властивість називається методом об'єкта.\n// ✅ Логічно і синтаксично згруповані сутності\n// const bookShelf = {\n//   books: ['The Last Kingdom', 'Dream Guardian'],\n//   // Це метод об'єкта\n//   getBooks() {\n//     console.log('Цей метод буде повертати всі книги - властивість books');\n//   },\n//   // Це метод об'єкта\n//   addBook(bookName) {\n//     console.log('Цей метод буде додавати нову книгу у властивість books');\n//   },\n// };\n\n/*Методи використовуються для роботи з властивостями об'єкта, їх зміни. Для доступу до об'єкта в методі використовується не ім'я змінної, наприклад bookShelf, а ключове слово this - контекст. Значенням this буде об'єкт перед «крапкою», тобто об'єкт, який викликав цей метод, у нашому випадку - це посилання на об'єкт bookShelf.*/\n// const bookShelf = {\n//   books: [\"The Last Kingdom\"],\n//   getBooks() {\n//     console.log(this);\n//   },\n// };\n\n// // Перед крапкою знаходиться об'єкт bookShelf,\n// // тому, викликаючи метод, this буде зберігати посилання на нього.\n// bookShelf.getBooks(); // {books: ['The Last Kingdom'], getBooks: f}\n// // Виклики методів\n// bookShelf.getBooks();\n// bookShelf.addBook('Нова книга');\n\n/*Для того, щоб отримати доступ до властивостей об'єкта в методах, ми звертаємось до нього через this і далі, стандартно - «через крапку» до властивостей. */\n// const bookShelf = {\n//   books: ['The Last Kingdom'],\n//   getBooks() {\n//     return this.books;\n//   },\n//   addBook(bookName) {\n//     this.books.push(bookName);\n//   },\n//   removeBook(bookName) {\n//     const bookIndex = this.books.indexOf(bookName);\n//     this.books.splice(bookIndex, 1);\n//   },\n// };\n\n// console.log(bookShelf.getBooks()); // [\"The Last Kingdom\"]\n// bookShelf.addBook('The Mist');\n// bookShelf.addBook('Dream Guardian');\n// console.log(bookShelf.getBooks()); // ['The Last Kingdom', 'The Mist', 'Dream Guardian']\n// bookShelf.removeBook('The Mist');\n// console.log(bookShelf.getBooks()); // ['The Last Kingdom', 'Dream Guardian']\n\n// const book = {\n//   title: 'The Last Kingdom',\n//   author: 'Bernard Cornwell',\n//   genres: ['historical prose', 'adventure'],\n//   rating: 8.38,\n// };\n\n// for (const key in book) {\n//   // Ключ\n//   console.log(key);\n//   // Значення властивості з таким ключем\n//   console.log(book[key]);\n// }\n\n//--------------hasOwnProperty\n// const book = {\n//   title: 'The Last Kingdom',\n//   author: 'Bernard Cornwell',\n//   genres: ['historical prose', 'adventure'],\n//   rating: 8.38,\n// };\n\n// for (const key in book) {\n//   // Якщо це власна властивість - виконуємо тіло if\n//   if (book.hasOwnProperty(key)) {\n//     console.log(key);\n//     console.log(book[key]);\n//   }\n\n//   // Якщо це невласна властивість - нічого не робимо\n// }\n\n// # Модуль 3. Занятие 1. Объекты\n\n// ## Example 1 - Основы обьектов\n\n// Напиши скрипт, который, для объекта `user`, последовательно:\n\n// - добавляет поле `mood` со значением `'happy'`\n// - заменяет значение `hobby` на `'skydiving'`\n// - заменяет значение `premium` на `false`\n// - выводит содержимое объекта `user` в формате `ключ:значение` используя\n//   `Object.keys()` и `for...of`\n\n// ### Код\n\n// const user = {\n//   name: 'Mango',\n//   age: 20,\n//   hobby: 'html',\n//   premium: true,\n// };\n\n// user.mood = 'happy';\n// user.hobby = 'skydiving';\n// user.premium = false;\n\n// //Отримуємо ключі через Object.keys\n// const keys = Object.keys(user);\n// console.log('keys', keys);\n\n// //Отримуємо значення ключів через user[key]\n// for (let key of keys) {\n//   console.log(`${key}: ${user[key]}`);\n// }\n\n// ## Example 2 - метод Object.values()\n\n// У нас есть объект, в котором хранятся зарплаты нашей команды. Напишите код для\n// суммирования всех зарплат и сохраните результат в переменной sum. Должно\n// получиться 390. Если объект `salaries` пуст, то результат должен быть 0.\n\n// ### Код\n\n// ```js\n// const salaries = {\n//   John: 100,\n//   Ann: 160,\n//   Pete: 130,\n// };\n// // ```\n// //v1\n// //   let sum = 0;\n\n// //   const values = Object.values(salaries);\n// //   for (let value of values) {\n// //     sum += value;\n// // }\n\n// // console.log(sum);\n\n// //v2\n// const salaries1 = {};\n\n// const calcSalaries = function (salaries) {\n//   //Виводимо значення ключів\n//   const values = Object.values(salaries);\n//   //Якщо обєкт порожній - виводимо 0\n//   if (values.length === 0) {\n//     return 0;\n//   }\n\n//   let sum = 0;\n//   for (let value of values) {\n//     sum += value;\n//   }\n//   return sum;\n// };\n\n// console.log(calcSalaries(salaries1));\n// console.log(calcSalaries(salaries));\n\n// ## Example 3 - Массив объектов\n\n// Напишите ф-цию `calcTotalPrice(stones, stoneName)`, которая принимает массив\n// обьектов и строку с названием камня. Ф-ция считает и возвращает общую стоимость\n// камней с таким именем, ценой и количеством из обьекта\n\n// ### Код\n\n// ```js\nconst stones = [\n  { name: 'Изумруд', price: 1300, quantity: 4 },\n  { name: 'Бриллиант', price: 2700, quantity: 3 },\n  { name: 'Сапфир', price: 400, quantity: 7 },\n  { name: 'Щебень', price: 200, quantity: 2 },\n];\n// ```\n\nfunction calcTotalPrice(stones, stoneName) {\n  //обраний камінь невідомий\n  let targetstone = null;\n  //для кожного камня із колецкції робимо порівняння на збіг по імені\n  for (let stone of stones) {\n    if (stone.name === stoneName) {\n      // якщо в нас є такий камінь записуємо його в змінну\n      targetstone = stone;\n    }\n  }\n  //повертаємо загальну вартість каменю\n  return targetstone.price * targetstone.quantity;\n}\n\nconsole.log(calcTotalPrice(stones, 'Сапфир'));\n\n// ## Example 4 - Комплексные задачи\n\n// Напиши скрипт управления личным кабинетом интернет банка. Есть объект `account`\n// в котором необходимо реализовать методы для работы с балансом и историей\n// транзакций.\n\n// ```js\n// /*\n//  * Типов транзацкий всего два.\n//  * Можно положить либо снять деньги со счета.\n//  */\n// const Transaction = {\n//   DEPOSIT: 'deposit',\n//   WITHDRAW: 'withdraw',\n// };\n\n// /*\n//  * Каждая транзакция это объект со свойствами: id, type и amount\n//  */\n\n// const account = {\n//   // Текущий баланс счета\n//   balance: 0,\n\n//   // История транзакций\n//   transactions: [],\n\n//   /*\n//    * Метод создает и возвращает объект транзакции.\n//    * Принимает сумму и тип транзакции.\n//    */\n//   createTransaction(amount, type) {},\n\n//   /*\n//    * Метод отвечающий за добавление суммы к балансу.\n//    * Принимает сумму танзакции.\n//    * Вызывает createTransaction для создания объекта транзакции\n//    * после чего добавляет его в историю транзакций\n//    */\n//   deposit(amount) {},\n\n//   /*\n//    * Метод отвечающий за снятие суммы с баланса.\n//    * Принимает сумму танзакции.\n//    * Вызывает createTransaction для создания объекта транзакции\n//    * после чего добавляет его в историю транзакций.\n//    *\n//    * Если amount больше чем текущий баланс, выводи сообщение\n//    * о том, что снятие такой суммы не возможно, недостаточно средств.\n//    */\n//   withdraw(amount) {},\n\n//   /*\n//    * Метод возвращает текущий баланс\n//    */\n//   getBalance() {},\n\n//   /*\n//    * Метод ищет и возвращает объект транзации по id\n//    */\n//   getTransactionDetails(id) {},\n\n//   /*\n//    * Метод возвращает количество средств\n//    * определенного типа транзакции из всей истории транзакций\n//    */\n//   getTransactionTotal(type) {},\n// };\n// ```\n"],"names":["console","log","stones","stoneName","targetstone","stone","name","price","quantity","$54940dfab0ce079e$var$calcTotalPrice"],"version":3,"file":"index.f9f24b37.js.map"}