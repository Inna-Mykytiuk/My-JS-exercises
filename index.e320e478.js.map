{"mappings":"YA8MA,MAAMA,EACK,UADLA,EAEM,WAONC,EAAU,CAEdC,QAAS,EAGTC,aAAc,GAMdC,kBAAkBC,EAAQC,GAE1B,EAQAC,QAAQF,GAIR,EAWAG,SAASH,GAKT,EAKAI,aAGA,EAKAC,sBAAsBC,GAGpB,IAAK,IAAIC,KAAeX,EAAQE,aAE9B,GAAIS,EAAYD,KAAOA,EACrB,OAAOC,EAIX,MAAO,sBACT,EAMAC,oBAAoBP,GAQXQ,OAKXC,QAAQC,IAAIf,EAAQQ,cACpBR,EAAQM,QAAQ,KAChBN,EAAQM,QAAQ,KAChBN,EAAQM,QAAQ,KAChBN,EAAQM,QAAQ,KAChBN,EAAQO,SAAS,IACjBP,EAAQO,SAAS,KACjBP,EAAQO,SAAS,KACjBO,QAAQC,IAAIf,EAAQQ,cACpBM,QAAQC,IAAIf,EAAQE,cACpBY,QAAQC,IAAIf,EAAQS,sBAAsB,KAC1CK,QAAQC,IAAIf,EAAQY,oBAAoBb,IACxCe,QAAQC,IAAIf,EAAQY,oBAAoBb,G","sources":["src/js/mod-3.js"],"sourcesContent":["//Якщо значення властивості - це функція, така властивість називається методом об'єкта.\n// ✅ Логічно і синтаксично згруповані сутності\n// const bookShelf = {\n//   books: ['The Last Kingdom', 'Dream Guardian'],\n//   // Це метод об'єкта\n//   getBooks() {\n//     console.log('Цей метод буде повертати всі книги - властивість books');\n//   },\n//   // Це метод об'єкта\n//   addBook(bookName) {\n//     console.log('Цей метод буде додавати нову книгу у властивість books');\n//   },\n// };\n\n/*Методи використовуються для роботи з властивостями об'єкта, їх зміни. Для доступу до об'єкта в методі використовується не ім'я змінної, наприклад bookShelf, а ключове слово this - контекст. Значенням this буде об'єкт перед «крапкою», тобто об'єкт, який викликав цей метод, у нашому випадку - це посилання на об'єкт bookShelf.*/\n// const bookShelf = {\n//   books: [\"The Last Kingdom\"],\n//   getBooks() {\n//     console.log(this);\n//   },\n// };\n\n// // Перед крапкою знаходиться об'єкт bookShelf,\n// // тому, викликаючи метод, this буде зберігати посилання на нього.\n// bookShelf.getBooks(); // {books: ['The Last Kingdom'], getBooks: f}\n// // Виклики методів\n// bookShelf.getBooks();\n// bookShelf.addBook('Нова книга');\n\n/*Для того, щоб отримати доступ до властивостей об'єкта в методах, ми звертаємось до нього через this і далі, стандартно - «через крапку» до властивостей. */\n// const bookShelf = {\n//   books: ['The Last Kingdom'],\n//   getBooks() {\n//     return this.books;\n//   },\n//   addBook(bookName) {\n//     this.books.push(bookName);\n//   },\n//   removeBook(bookName) {\n//     const bookIndex = this.books.indexOf(bookName);\n//     this.books.splice(bookIndex, 1);\n//   },\n// };\n\n// console.log(bookShelf.getBooks()); // [\"The Last Kingdom\"]\n// bookShelf.addBook('The Mist');\n// bookShelf.addBook('Dream Guardian');\n// console.log(bookShelf.getBooks()); // ['The Last Kingdom', 'The Mist', 'Dream Guardian']\n// bookShelf.removeBook('The Mist');\n// console.log(bookShelf.getBooks()); // ['The Last Kingdom', 'Dream Guardian']\n\n// const book = {\n//   title: 'The Last Kingdom',\n//   author: 'Bernard Cornwell',\n//   genres: ['historical prose', 'adventure'],\n//   rating: 8.38,\n// };\n\n// for (const key in book) {\n//   // Ключ\n//   console.log(key);\n//   // Значення властивості з таким ключем\n//   console.log(book[key]);\n// }\n\n//--------------hasOwnProperty\n// const book = {\n//   title: 'The Last Kingdom',\n//   author: 'Bernard Cornwell',\n//   genres: ['historical prose', 'adventure'],\n//   rating: 8.38,\n// };\n\n// for (const key in book) {\n//   // Якщо це власна властивість - виконуємо тіло if\n//   if (book.hasOwnProperty(key)) {\n//     console.log(key);\n//     console.log(book[key]);\n//   }\n\n//   // Якщо це невласна властивість - нічого не робимо\n// }\n\n// # Модуль 3. Занятие 1. Объекты\n\n// ## Example 1 - Основы обьектов\n\n// Напиши скрипт, который, для объекта `user`, последовательно:\n\n// - добавляет поле `mood` со значением `'happy'`\n// - заменяет значение `hobby` на `'skydiving'`\n// - заменяет значение `premium` на `false`\n// - выводит содержимое объекта `user` в формате `ключ:значение` используя\n//   `Object.keys()` и `for...of`\n\n// ### Код\n\n// const user = {\n//   name: 'Mango',\n//   age: 20,\n//   hobby: 'html',\n//   premium: true,\n// };\n\n// user.mood = 'happy';\n// user.hobby = 'skydiving';\n// user.premium = false;\n\n// //Отримуємо ключі через Object.keys\n// const keys = Object.keys(user);\n// console.log('keys', keys);\n\n// //Отримуємо значення ключів через user[key]\n// for (let key of keys) {\n//   console.log(`${key}: ${user[key]}`);\n// }\n\n// ## Example 2 - метод Object.values()\n\n// У нас есть объект, в котором хранятся зарплаты нашей команды. Напишите код для\n// суммирования всех зарплат и сохраните результат в переменной sum. Должно\n// получиться 390. Если объект `salaries` пуст, то результат должен быть 0.\n\n// ### Код\n\n// ```js\n// const salaries = {\n//   John: 100,\n//   Ann: 160,\n//   Pete: 130,\n// };\n// // ```\n// //v1\n// //   let sum = 0;\n\n// //   const values = Object.values(salaries);\n// //   for (let value of values) {\n// //     sum += value;\n// // }\n\n// // console.log(sum);\n\n// //v2\n// const salaries1 = {};\n\n// const calcSalaries = function (salaries) {\n//   //Виводимо значення ключів\n//   const values = Object.values(salaries);\n//   //Якщо обєкт порожній - виводимо 0\n//   if (values.length === 0) {\n//     return 0;\n//   }\n\n//   let sum = 0;\n//   for (let value of values) {\n//     sum += value;\n//   }\n//   return sum;\n// };\n\n// console.log(calcSalaries(salaries1));\n// console.log(calcSalaries(salaries));\n\n// ## Example 3 - Массив объектов\n\n// Напишите ф-цию `calcTotalPrice(stones, stoneName)`, которая принимает массив\n// обьектов и строку с названием камня. Ф-ция считает и возвращает общую стоимость\n// камней с таким именем, ценой и количеством из обьекта\n\n// ### Код\n\n// ```js\n// const stones = [\n//   { name: 'Изумруд', price: 1300, quantity: 4 },\n//   { name: 'Бриллиант', price: 2700, quantity: 3 },\n//   { name: 'Сапфир', price: 400, quantity: 7 },\n//   { name: 'Щебень', price: 200, quantity: 2 },\n// ];\n// // ```\n\n// function calcTotalPrice(stones, stoneName) {\n//   //обраний камінь невідомий\n//   let targetstone = null;\n//   //для кожного камня із колецкції робимо порівняння на збіг по імені\n//   for (let stone of stones) {\n//     if (stone.name === stoneName) {\n//       // якщо в нас є такий камінь записуємо його в змінну\n//       targetstone = stone;\n//     }\n//   }\n//   //повертаємо загальну вартість каменю\n//   return targetstone.price * targetstone.quantity;\n// }\n// console.log(calcTotalPrice(stones, 'Сапфир'));\n\n// ## Example 4 - Комплексные задачи\n\n// Напиши скрипт управления личным кабинетом интернет банка. Есть объект `account`\n// в котором необходимо реализовать методы для работы с балансом и историей\n// транзакций.\n\n// ```js\n// /*\n//  * Типов транзацкий всего два.\n//  * Можно положить либо снять деньги со счета.\n//  */\nconst Transaction = {\n  DEPOSIT: 'deposit',\n  WITHDRAW: 'withdraw',\n};\n\n// /*\n//  * Каждая транзакция это объект со свойствами: id, type и amount\n//  */\n\nconst account = {\n  // Текущий баланс счета\n  balance: 0,\n\n  // История транзакций\n  transactions: [],\n\n  /*\n   * Метод создает и возвращает объект транзакции.\n   * Принимает сумму и тип транзакции.\n   */\n  createTransaction(amount, type) {\n    //створюємо і повертаємо обєкт(назва транзакції, тип, та створюємо айді з довжиною акаунтних транзакцій)\n  },\n\n  /*\n   * Метод отвечающий за добавление суммы к балансу.\n   * Принимает сумму танзакции.\n   * Вызывает createTransaction для создания объекта транзакции\n   * после чего добавляет его в историю транзакций\n   */\n  deposit(amount) {\n    //додаємо до балансу амаунт\n    //створюємо змінну транзакції і викликаємо його\n    //додаємо в історію транзакцій\n  },\n\n  /*\n   * Метод отвечающий за снятие суммы с баланса.\n   * Принимает сумму танзакции.\n   * Вызывает createTransaction для создания объекта транзакции\n   * после чего добавляет его в историю транзакций.\n   *\n   * Если amount больше чем текущий баланс, выводи сообщение\n   * о том, что снятие такой суммы не возможно, недостаточно средств.\n   */\n  withdraw(amount) {\n    // робимо перевірку якщо амаунт більше ніж баланс виводимо повідомлення через return\n    // іфднімаємо від баланса суму\n    //створюємо змінну транзакції і викликаємо його\n    //додаємо в історію транзакцій\n  },\n\n  /*\n   * Метод возвращает текущий баланс\n   */\n  getBalance() {\n    //просто повертаємо баланс\n    // return this.balance;\n  },\n\n  /*\n   * Метод ищет и возвращает объект транзации по id\n   */\n  getTransactionDetails(id) {\n    //дає можливість знайти обєкт однієї операції\n    // створюємо цикл for...of перебираємо транзакції із нашого акаунту\n    for (let transaction of account.transactions) {\n      // якщо айді транзакції = айді - повертаємо транзакцію\n      if (transaction.id === id) {\n        return transaction;\n      }\n    }\n    //якщо операції немає повертаємо рядок\n    return 'Операції не знайдено';\n  },\n\n  /*\n   * Метод возвращает количество средств\n   * определенного типа транзакции из всей истории транзакций\n   */\n  getTransactionTotal(type) {\n    //створюємо проміжну тотал змінну для сумування\n\n    //перебираємо масив транзакцій акаунту\n\n    //якщо тип транзакції спвпадає з типом , сумуємо до тоталу суму транзакції\n\n    //повертаємо тотал\n    return total;\n  },\n};\n// ```\n\nconsole.log(account.getBalance());\naccount.deposit(150);\naccount.deposit(250);\naccount.deposit(350);\naccount.deposit(150);\naccount.withdraw(50);\naccount.withdraw(150);\naccount.withdraw(250);\nconsole.log(account.getBalance());\nconsole.log(account.transactions);\nconsole.log(account.getTransactionDetails(20));\nconsole.log(account.getTransactionTotal(Transaction.WITHDRAW));\nconsole.log(account.getTransactionTotal(Transaction.DEPOSIT));\n"],"names":["$2c9588379460a15a$var$Transaction","$2c9588379460a15a$var$account","balance","transactions","createTransaction","amount","type","deposit","withdraw","getBalance","getTransactionDetails","id","transaction","getTransactionTotal","total","console","log"],"version":3,"file":"index.e320e478.js.map"}